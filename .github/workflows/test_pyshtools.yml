---
    name: pyshtools
    
    permissions:
      checks: write
      pull-requests: write
      contents: write
    
    on: # yamllint disable-line rule:truthy
      # Trigger mega-linter at every push. Action will also be visible from Pull Requests to main
      pull_request:
        branches: [master, main]
    
    env: # Comment env block if you do not want to apply fixes
      # Apply linter fixes configuration
      APPLY_FIXES: all # When active, APPLY_FIXES must also be defined as environment variable (in github/workflows/mega-linter.yml or other CI tool)
      APPLY_FIXES_EVENT: pull_request # Decide which event triggers application of fixes in a commit or a PR (pull_request, push, all)
      APPLY_FIXES_MODE: commit # If APPLY_FIXES is used, defines if the fixes are directly committed (commit) or posted in a PR (pull_request)
    
    concurrency:
      group: ${{ github.ref }}-${{ github.workflow }}
      cancel-in-progress: true
    
    jobs:
      build:
        name: Test
        runs-on: ubuntu-latest
    
        permissions:
          checks: write
          pull-requests: write
          contents: write
    
        steps:
          - name: Check out repository
            uses: actions/checkout@v3
    
          - name: Cache wheel directory
            id: cache-wheels
            uses: actions/cache@v3
            with:
              path: ${{ github.workspace }}/alpine-wheels
              key: ${{ runner.os }}-alpine-wheels-${{ hashFiles('requirements.txt') }}
              restore-keys: |
                ${{ runner.os }}-alpine-wheels-
    
            # not using lapack-dev, lapack, liblapack... # commented out openblas-dev,  for now #meson #ninja now on pip
          - name: Set up Alpine Linux
            if: steps.cache-wheels.outputs.cache-hit != 'true'
            uses: jirutka/setup-alpine@v1
            with:
              packages: >
                build-base
                python3-dev
                py3-pip
                gfortran
                fftw-dev
                git
                openblas-dev
                cmake
    
          - name: Upgrade pip and install requirements for building
            if: steps.cache-wheels.outputs.cache-hit != 'true'
            run: |
              python -m pip install --upgrade pip
              python -m pip install meson-python meson ninja wheel build
            shell: alpine.sh {0}
    
          - name: Remove version settings
            if: steps.cache-wheels.outputs.cache-hit != 'true'
            run: |
              sed 's/==.*//' requirements.txt > requirements_no_version.txt
            shell: alpine.sh {0}
    
          - name: List contents of /usr/lib # See if fftw etc. are installed correctly.
            run: |
              ls /usr/lib
            shell: alpine.sh {0}
    
          - name: Run CMake to find LAPACK
            run: |
              echo "find_package(LAPACK)" > CMakeLists.txt
              echo "if(LAPACK_FOUND)" >> CMakeLists.txt
              echo '  message("LAPACK found")' >> CMakeLists.txt
              echo '  message("LAPACK include dirs: ${LAPACK_INCLUDE_DIRS}")' >> CMakeLists.txt
              echo '  message("LAPACK libraries: ${LAPACK_LIBRARIES}")' >> CMakeLists.txt
              echo "else()" >> CMakeLists.txt
              echo '  message(FATAL_ERROR "LAPACK not found")' >> CMakeLists.txt
              echo "endif()" >> CMakeLists.txt
              cmake .
            shell: alpine.sh {0}

          - name: Run pkg-config to find LAPACK
            run: |
              pkg-config --libs --cflags lapack || true

            shell: alpine.sh {0}

          - name: Build wheels
            if: steps.cache-wheels.outputs.cache-hit != 'true'
            run: |
              for package in $(cat requirements_no_version.txt); do
                echo "Building wheel for $package"
                if [ "$package" == "pyshtools" ]; then
                  git clone https://github.com/FlorianPfaff/SHTOOLS.git
                  cd SHTOOLS
                  git checkout meson
                  python -m build
                  cd ..
                  mv SHTOOLS/dist/* ./alpine-wheels
                elif ! pip download --only-binary=:all: --no-deps "$package" -d /tmp > /dev/null 2>&1; then
                  pip wheel --wheel-dir=./alpine-wheels "$package"
                else
                  echo "Compatible wheel for $package found, skipping build"
                fi
              done

            shell: alpine.sh {0}
